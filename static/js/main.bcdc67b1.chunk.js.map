{"version":3,"sources":["components/YourComponent.js","components/Options.js","components/OptionRadio.js","containers/ColorPalatte.js","containers/IconSelect.js","containers/AddButtons.js","containers/PrismComponent.js","containers/GenerateCode.js","components/Output.js","containers/SelectionAndOutput.js","containers/App.js","serviceWorker.js","index.js"],"names":["YourComponent","props","id","dangerouslySetInnerHTML","__html","color","hex","font","fontColor","className","showMenuIcon","title","titleText","position","menuicon","menuIcon","type","layout","itemsAdded","map","button","index","WCbuttons","document","querySelector","shadowRoot","querySelectorAll","length","innerHTML","key","slot","data-index","hideMenu","Options","options","option","onClick","data-text","replace","optionSelected","OptionRadio","item","onChange","name","checked","toLowerCase","ColorPalette","state","colorArr","Object","keys","colorData","forEach","colorKey","shadeKey","obj","hue","shade","push","this","parseInt","alpha","style","data-id","data-hue","data-shade","data-fontcolor","data-alpha","bgColor","Component","IconSelect","Icons","icons","uuid","label","AddButtons","drop","bind","over","event","preventDefault","data","dragIndex","dataTransfer","getData","dragText","dropIndex","target","getAttribute","dropText","splice","swapItems","setData","draggable","onDrop","onDragOver","onDragStart","start","PrismCode","highlight","ref","current","Prism","highlightElement","React","createRef","copy","textarea","createElement","copyText","textContent","appendChild","format","repeat","select","execCommand","remove","code","plugins","language","display","trim","GenerateCode","renderHTML","node","poop","cloneNode","clone","arr","htmlString","join","console","log","setState","html","prevProps","prevState","update","theme","showIcon","Output","setLayout","layoutOptions","activeFontFamily","setFont","apiKey","setBgColor","setMenuIcon","onInput","setTitleText","addItems","SelectionAndOutput","selectOption","nativeEvent","App","colorType","primaryColorData","secondaryColorData","input","buttonsBuilt","config","toLocaleLowerCase","family","value","test","selectedHex","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcdc67b1.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst YourComponent = (props) => {\n  return (\n    <div>\n      <div id={\"css\"}>\n        <style dangerouslySetInnerHTML={{__html: `flayvor-top-app-bar {\n            background: ${props.color.hex};\n            font-family:\"${props.font}\";\n            color:${props.color.fontColor};\n        }`}} />\n      </div>\n      <div id={\"markup\"} className={\"apply-font\"}>\n        {props.showMenuIcon === true ?\n          <flayvor-top-app-bar\n            title={props.titleText}\n            position=\"static\"\n            menuicon={props.menuIcon}\n            type={props.layout}\n          >\n            {\n                props.itemsAdded.map((button,index) => {\n                  const WC = document.querySelector('flayvor-top-app-bar'),\n                    WCbuttons = WC.shadowRoot.querySelectorAll('button[slot=\"right\"]');\n                  if (WCbuttons.length === 3) {\n                    WCbuttons[index].innerHTML = button\n                  }\n                  return (\n                    <button key={index}\n                            slot=\"right\"\n                            data-index={index}\n                            className=\"material-icons mdc-icon-button mdc-top-app-bar__action-item\">\n                      {button}\n                    </button>\n                  )\n                })\n            }\n          </flayvor-top-app-bar> :\n          <flayvor-top-app-bar\n            title={props.title}\n            position=\"static\"\n            type={props.layout}\n            hideMenu>\n            {\n                props.itemsAdded.map((button,index) => {\n                  return (\n                    <button key={index}\n                            slot=\"right\"\n                            data-index={index}\n                            className=\"material-icons mdc-icon-button mdc-top-app-bar__action-item\">\n                      {button}\n                    </button>\n                  )\n                })\n            }\n          </flayvor-top-app-bar>\n        }\n      </div>\n    </div>\n  );\n};\nexport default YourComponent\n","import React from \"react\";\n\nconst Options = (props) => {\n  return (\n    <div className={\"selection\"}>\n      <span>Options:</span>\n      <nav>\n        <ul>\n          {\n            props.options.map((option, index) => {\n              return (\n                <li key={index}>\n                  <button\n                    onClick={props.onClick}\n                    data-text={option}\n                    id={option.\n                    replace(/\\s/g, '')}\n                    className={props.optionSelected === option ? \"active\" : \"\"}\n                  >{option}\n                  </button>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </nav>\n    </div>\n  );\n};\nexport default Options\n\n","import React, {Fragment} from \"react\";\n\nconst OptionRadio = (props) => {\n  return (\n\n      <fieldset>\n        <div className={\"control-group\"}>\n          {\n            props.options.map((item,index) => {\n              return (\n                <Fragment key={index}>\n                  <label className=\"control control-radio\">\n                    {item}\n                    <input onChange={props.onChange} id={item} type=\"radio\" name=\"radio\" checked={props.layout === item.toLowerCase()}/>\n                    <div className=\"control_indicator\"></div>\n                  </label>\n                </Fragment>\n              )\n            })\n          }\n        </div>\n      </fieldset>\n  );\n};\nexport default OptionRadio\n\n","import React, {Component, Fragment} from 'react';\nimport colorData from '../assets/colors';\n\nclass ColorPalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.colorArr = [];\n  }\n\n  componentWillMount() {\n    Object.keys(colorData).forEach(colorKey => {\n      Object.keys(colorData[colorKey]).forEach(shadeKey => {\n        const obj = {}\n        obj.hue = colorKey;\n        obj.shade = shadeKey;\n        obj.hex = colorData[colorKey][shadeKey];\n        obj.fontColor = 'black';\n        this.colorArr.push(obj);\n      })\n    });\n\n    this.colorArr.map(color => {\n      if (color.hue === 'black') {\n        color.fontColor = 'white'\n      }\n      if (color.hue === 'purple' || color.hue === 'deeppurple' || color.hue === 'indigo' || color.hue === 'brown') {\n        if (color.shade === '300') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 400 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'red' || color.hue === 'pink'  || color.hue === 'purple' || color.hue === 'deeppurple' || color.hue === 'indigo' || color.hue === 'brown' || color.hue === 'bluegrey') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 500 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'teal' || color.hue === 'green') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 600 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'blue' || color.hue === 'green' || color.hue === 'deeporange' || color.hue === 'grey') {\n          color.fontColor = 'white'\n        }\n      }\n      if (color.shade === 'a200' || color.shade ==='a400' || color.shade === 'a700') {\n        if (color.hue === 'red' || color.hue === 'pink' || color.hue === 'purple' || color.hue === 'deeppurple' || color.hue === 'indigo' || color.hue === 'blue') {\n          color.fontColor = 'white'\n        }\n      }\n      if (color.shade === 'a100' || color.shade === 'a200' || color.shade ==='a400' || color.shade === 'a700') {\n        color.alpha = true\n      } else {\n        color.alpha = false\n      }\n      if (parseInt(color.shade) >= 700 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'lightblue' || color.hue === 'cyan') {\n          color.fontColor = 'white';\n        }\n      }\n      if (color.shade === 'a700' && color.hue === 'lightblue') {\n        color.fontColor = 'white'\n      }\n      if (parseInt(color.shade) >= 800 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'lightgreen') {\n          color.fontColor = 'white';\n        }\n      }\n      if (parseInt(color.shade) === 900) {\n        if (color.hue === 'lime' || color.hue === 'orange') {\n          color.fontColor = 'white';\n        }\n      }\n      if (color.shade ==='a400' || color.shade === 'a700') {\n        if (color.hue === 'red' || color.hue === 'deeporange') {\n          color.fontColor = 'white'\n        }\n      }\n    })\n  }\n\n  componentDidMount() {\n\n  }\n\n  render () {\n    return (\n      <Fragment>\n        <div className={\"color-palatte\"}>\n          {\n            this.colorArr.map((color,index) => {\n              if (color.shade === '500') {\n                return (\n                  <button key={index} className={this.props.color.hue === color.hue? 'color active ' + color.fontColor : 'color ' + color.fontColor} style={{'backgroundColor': color.hex}} onClick={this.props.onClick} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} data-fontcolor={color.fontColor} data-alpha={color.alpha}><span>{color.hue}</span></button>\n                )\n              }\n            })\n          }\n        </div>\n        <div className={\"color-palatte sub\"}>\n          {\n            this.colorArr.map((color,index) => {\n              if (color.hue === this.props.color.hue && color.hue !== 'black' && color.hue !== 'white') {\n                return (\n                  <button key={index} className={this.props.bgColor === color.hex && color.hue !== 'black' && color.hue !== 'white'  ? 'color active ' + color.fontColor: 'color ' + color.fontColor} style={{'backgroundColor': color.hex}} onClick={this.props.onClick} data-id={color.hex} data-hue={color.hue} data-shade={color.shade}  data-fontcolor={color.fontColor}  data-alpha={color.alpha}>{color.shade}</button>\n                )\n              }\n            })\n          }\n        </div>\n      </Fragment>\n\n    )\n  }\n}\n\nexport default ColorPalette;\n\n\n","import React, {Component, Fragment} from 'react';\nimport Icons from '../assets/icons';\nimport uuid from 'uuid'\nclass IconSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n  }\n\n\n  render () {\n    return Icons.icons.map(item => {\n      return (\n        <button key={uuid()} id={uuid()}\n                onClick={this.props.onClick} className=\"menu-icon material-icons mdc-top-app-bar__navigation-icon mdc-icon-button mdc-ripple-upgraded--unbounded mdc-ripple-upgraded\">{item.label}</button>\n      )\n    })\n  }\n}\n\nexport default IconSelect;\n\n\n","import React, {Component, Fragment} from 'react';\nimport uuid from 'uuid'\nimport IconSelect from \"./IconSelect\";\nimport _ from 'lodash';\nclass AddButtons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  this.drop = this.drop.bind(this);\n    this.over = this.over.bind(this);\n  }\n\n\n  over(event) {\n    event.preventDefault();\n  }\n\n  drop(event) {\n    const data = this.props.itemsAdded,\n      dragIndex = event.dataTransfer.getData(\"text\"),\n      dragText = this.props.itemsAdded[dragIndex],\n      dropIndex = event.target.getAttribute('data-index'),\n      dropText = this.props.itemsAdded[dropIndex];\n\n    const remove = data.splice(dropIndex, 1, dragText),\n      add = data.splice(dragIndex, 1, dropText)\n    this.props.swapItems(event, data)\n  }\n\n  start(event) {\n    const index = event.target.getAttribute('data-index');\n    event.dataTransfer.setData(\"text/plain\", index)\n  }\n\n  render () {\n    if (this.props.itemsAdded.length === 0 ) {\n      return (\n        <div className={\"add-buttons-container\"}>\n          <div className={\"drag-target-container\"}>\n            <div className={\"target\"}></div>\n            <div className={\"target\"}></div>\n            <div className={\"target\"}></div>\n          </div>\n          <div className={\"scroll-container\"}>\n            <div className={\"icon-grid\"}>\n              <IconSelect draggable={true} onClick={this.props.onClick}/>\n            </div>\n          </div>\n        </div>\n      )\n    } else if (this.props.itemsAdded.length === 1) {\n      return (\n        <div className={\"add-buttons-container\"}>\n          <div className={\"drag-target-container\"}>\n            {\n              this.props.itemsAdded.map((item,index) => {\n                return (\n                  <Fragment key={uuid()}>\n                    <div data-index={index} className={\"target\"} key={uuid()}>\n                      <i className=\"material-icons\">\n                        {item}\n                      </i>\n                    </div>\n                    <div data-index={index} className={\"target\"}></div>\n                    <div data-index={index} className={\"target\"}></div>\n                  </Fragment>\n                )\n              })\n            }\n          </div>\n          <div className={\"scroll-container\"}>\n            <div className={\"icon-grid\"}>\n              <IconSelect draggable={true} onClick={this.props.onClick}/>\n            </div>\n          </div>\n        </div>\n      )\n    } else if (this.props.itemsAdded.length === 2) {\n      return (\n        <div className={\"add-buttons-container\"}>\n          <div className={\"drag-target-container\"}>\n            {\n              this.props.itemsAdded.map((item,index) => {\n                return (\n                  <Fragment key={uuid()}>\n                    <div data-index={index} className={\"target\"} key={uuid()} draggable={true}>\n                      <i className=\"material-icons\">\n                        {item}\n                      </i>\n                    </div>\n\n                  </Fragment>\n                )\n              })\n            }\n            <div className={\"target\"}></div>\n          </div>\n          <div className={\"scroll-container\"}>\n            <div className={\"icon-grid\"}>\n              <IconSelect onClick={this.props.onClick}/>\n            </div>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div className={\"add-buttons-container\"}>\n          <div className={\"drag-target-container\"}>\n            {\n              this.props.itemsAdded.map((item,index) => {\n                return (\n                  <div data-index={index} onDrop={this.drop} onDragOver={this.over} onDragStart={this.start} className={\"target\"} key={uuid()} draggable={true}>\n                    <i className=\"material-icons\">\n                      {item}\n                    </i>\n                  </div>\n                )\n              })\n            }\n          </div>\n          <div className={\"scroll-container\"}>\n            <div className={\"icon-grid\"}>\n              <IconSelect onClick={this.props.onClick}/>\n            </div>\n          </div>\n        </div>\n        )\n    }\n  }\n}\n\nexport default AddButtons;\n\n\n\n","import React, {Fragment} from \"react\"\nimport Prism from \"prismjs\"\nimport format from \"html-format\"\n\n\nexport class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n    this.copy = this.copy.bind(this)\n  }\n  componentDidMount() {\n    this.highlight()\n  }\n  componentDidUpdate() {\n    this.highlight()\n  }\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  copy () {\n    const textarea = document.createElement('textarea'),\n      copyText = document.querySelector(\"code\").textContent,\n      target = document.querySelector('#copyCapture');\n\n    textarea.id = \"codeInput\";\n    target.appendChild(textarea);\n    textarea.innerHTML = format(copyText, ' '.repeat(4));\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n  }\n  //https://stackoverflow.com/questions/39501289/in-reactjs-how-to-copy-text-to-clipboard\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n    <div id={\"copyCapture\"} className={this.props.type}>\n      <button onClick={this.copy} className=\"mdc-button mdc-button--dense\" style={{display: \"flex\"}}>\n        <i className=\"material-icons mdc-button__icon\">code</i>\n        <span className=\"mdc-button__label\">Copy</span>\n      </button>\n        <pre>\n          <code ref={this.ref} className={`language-${this.props.type}`}>\n            {code.trim()}\n          </code>\n      </pre>\n    </div>\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport format from \"html-format\"\nimport '../assets/code.css'\nimport {PrismCode} from \"./PrismComponent\"\n\n\nclass GenerateCode extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.renderHTML = this.renderHTML.bind(this);\n  }\n\n  componentDidMount () {\n    if (this.props.type === \"html\") {\n      this.node = document.querySelector('#markup');\n      this.poop = document.querySelector('#markup').cloneNode(true);\n      this.clone = this.poop.querySelector('flayvor-top-app-bar');\n\n      const arr = [];\n      this.props.itemsAdded.map(item => {\n        arr.push(`<button slot=\"right\" data-index=\"0\" class=\"material-icons\n        mdc-icon-button mdc-top-app-bar__action-item\">${item}</button>`)\n      })\n      const htmlString = arr.join('');\n\n      this.clone.innerHTML = htmlString\n      console.log(this.poop)\n      this.setState({html: format(this.poop.innerHTML, ' '.repeat(4))})\n    } else {\n      this.node = document.querySelector('#css style');\n      this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    console.log(this.props.itemsAdded)\n    this.node = document.querySelector('#markup');\n    if (this.props.type === \"html\") {\n      if (this.props.update !== prevProps.update || this.props.theme !== prevProps.theme || this.props.menuIcon !== prevProps.menuIcon || this.props.showIcon !== prevProps.showIcon  || this.props.title !== prevProps.title) {\n        this.node = document.querySelector('#markup');\n        console.log('MARKUP', this.node)\n        this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n      }\n    } else {\n      if (this.props.font !== prevProps.font || this.props.color !== prevProps.color || this.props.fontColor !== prevProps.fontColor) {\n        this.node=document.querySelector('#css style');\n        this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n      }\n    }\n\n  }\n  renderHTML () {\n\n    return (\n      `\n      ${this.state.html}\n    `\n    )\n  }\n\n  render () {\n    return (\n      <PrismCode\n        code={this.renderHTML()}\n        language={this.props.type}\n        plugins={[\"line-numbers\"]}\n        type={this.props.type}\n      />\n    )\n  }\n}\n\nexport default GenerateCode;\n\n","import React, { Fragment } from \"react\";\nimport OptionRadio from \"./OptionRadio\";\nimport FontPicker from \"font-picker-react\";\nimport ColorPalette from \"../containers/ColorPalatte\";\nimport IconSelect from \"../containers/IconSelect\";\nimport uuid from \"uuid\";\nimport AddButtons from \"../containers/AddButtons\";\nimport GenerateCode from \"../containers/GenerateCode\";\n\nconst Output = props => {\n  return (\n    <div className={\"output\"}>\n      <span>\n        {props.optionSelected === \"Layout\"\n          ? \"Select a layout\"\n          : props.optionSelected === \"Typography\"\n            ? \"Select a font family\"\n            : props.optionSelected === \"Color\"\n              ? \"Select your background color\"\n              : props.optionSelected === \"Menu icon\"\n                ? \"Change your menu icon\"\n                : props.optionSelected === \"Title\"\n                  ? \"Change your title\"\n                  : props.optionSelected === \"Add items\"\n                    ? \"Add menu buttons\"\n                    : \"Generate your HTML & CSS Code\"}\n      </span>\n      <div\n        className={\n          props.optionSelected === \"Menu icon\" ||\n          props.optionSelected === \"Add items\"\n            ? \"content icon\"\n            : \"content\"\n        }\n      >\n        <div className={\"description\"}>\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\n            accumsan, neque id congue fermentum, sapien nisi vehicula neque, id\n            pharetra orci erat quis velit.\n          </p>\n        </div>\n        {props.optionSelected === \"Layout\" ? (\n          <OptionRadio\n            layout={props.layout}\n            onChange={props.setLayout}\n            options={props.layoutOptions}\n          />\n        ) : props.optionSelected === \"Typography\" ? (\n          <FontPicker\n            activeFontFamily={props.font}\n            onChange={props.setFont}\n            apiKey=\"AIzaSyAMJM5phI4GbCGR8Dcu8rIlxFxOermsVDM\"\n          />\n        ) : props.optionSelected === \"Color\" ? (\n          <ColorPalette\n            color={props.color}\n            bgColor={props.bgColor}\n            onClick={props.setBgColor}\n          />\n        ) : props.optionSelected === \"Menu icon\" ? (\n          <div className={\"scroll-container\"}>\n            <div className={\"icon-grid\"}>\n              <IconSelect onClick={props.setMenuIcon} draggable={false} />\n            </div>{\" \"}\n          </div>\n        ) : props.optionSelected === \"Title\" ? (\n          <div className={\"basic-input\"}>\n            <label>Label</label>\n            <input onInput={props.setTitleText} type={\"text\"} />\n          </div>\n        ) : props.optionSelected === \"Add items\" ? (\n          <AddButtons\n            swapItems={props.swapItems}\n            onClick={props.addItems}\n            itemsAdded={props.itemsAdded}\n          />\n        ) : (\n            <div className={\"code-container\"}>\n              <div className={\"row\"}>\n                <GenerateCode itemsAdded={props.itemsAdded} type={\"html\"}  theme={props.layout} menuIcon={props.setMenuIcon} showIcon={true} title={props.setTitleText}></GenerateCode>\n              </div>\n              <div className={\"row\"}>\n                <GenerateCode font={props.font} type={\"css\"} color={props.bgColor} fontColor={props.color}/>\n              </div>\n            </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Output;\n","// State held component not using Redux\nimport React, {Component} from 'react';\nimport Options from \"../components/Options\";\nimport Output from \"../components/Output\";\n\nclass SelectionAndOutput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      optionSelected: 'Generate code'\n    };\n    this.selectOption = this.selectOption.bind(this);\n  }\n\n  // COMPONENT INIT\n  // componentWillMount is called before the render method is executed.\n  // It is important to note that setting the state in this phase will not trigger a re-rendering.\n  componentWillMount() {\n\n  }\n\n  // The DOM can be accessed in this method, enabling to define DOM manipulations or data fetching operations.\n  // Any DOM interactions should always happen in this phase not inside the render method.\n  componentDidMount() {\n\n  }\n\n  // COMPONENT STATE UPDATES\n  // shouldComponentUpdate is always called before the render method and enables to define if a re-rendering is needed or can be skipped.\n\n\n  // componentWillUpdate gets called as soon as the the shouldComponentUpdate returned true.\n  // Any state changes via this.setState are not allowed as this method should be strictly used\n  // to prepare for an upcoming update not trigger an update itself.\n\n\n  // componentDidUpdate is called after the render method. Similar to the componentDidMount,\n  // this method can be used to perform DOM operations after the data has been updated.\n  componentDidUpdate (prevProps, prevState) {\n\n  }\n\n  // UPDATE PROPS\n  // componentWillReceiveProps is only called when the props have changed and when this is not an initial rendering.\n  // componentWillReceiveProps enables to update the state depending on the existing and upcoming props, without triggering another rendering.\n  // One interesting thing to remember here is that there is no equivalent method for the state as state changes should never trigger any props changes.\n  componentWillReceiveProps () {\n\n  }\n\n  selectOption (event) {\n    this.setState({optionSelected: event.nativeEvent.target.getAttribute('data-text')})\n  }\n\n  render () {\n    return (\n      <div className={\"selection-and-output\"}>\n        <Options\n          options={this.props.options}\n          onClick={this.selectOption}\n          optionSelected={this.state.optionSelected}\n        />\n        <Output\n          optionSelected={this.state.optionSelected}\n          layoutOptions={this.props.layoutOptions}\n          setLayout={this.props.setLayout}\n          layout={this.props.layout}\n          setFont={this.props.setFont}\n          font={this.props.font}\n          setBgColor={this.props.setBgColor}\n          bgColor={this.props.color.hex}\n          color={this.props.color}\n          setMenuIcon={this.props.setMenuIcon}\n          setTitleText={this.props.setTitleText}\n          addItems={this.props.addItems}\n          itemsAdded={this.props.itemsAdded}\n          swapItems={this.props.swapItems}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SelectionAndOutput;\n\n","// State held component not using Redux\nimport React, {Component} from 'react';\nimport '../App.css';\nimport YourComponent from \"../components/YourComponent\";\nimport SelectionAndOutput from \"./SelectionAndOutput\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorType: \"primary\",\n      menuIcon: \"menu\",\n      primaryColorData: {},\n      secondaryColorData: {},\n      showMenuIcon: true,\n      input: '',\n      buttonsBuilt: [],\n      font: \"Open Sans\",\n      layout: 'standard',\n      color: {\n        hex: \"#f44336\",\n        hue: \"red\",\n        shade: \"500\",\n        fontColor: \"white\"\n      },\n      titleText: \"This is your title\",\n      itemsAdded: []\n    };\n    this.config = {\n      options: [\n        'Layout', 'Typography', 'Color', 'Menu icon', 'Title', 'Add items', 'Generate code'\n      ],\n      layout: [\n        'Standard', 'Dense', 'Prominent', 'Collapsed', 'Short', 'Fixed'\n      ]\n    }\n    this.setLayout = this.setLayout.bind(this);\n    this.setFont = this.setFont.bind(this);\n    this.setBgColor = this.setBgColor.bind(this);\n    this.setMenuIcon = this.setMenuIcon.bind(this);\n    this.setTitleText = this.setTitleText.bind(this);\n    this.addItems = this.addItems.bind(this);\n    this.swapItems = this.swapItems.bind(this);\n  }\n\n  setMenuIcon (event) {\n    this.setState({menuIcon: event.nativeEvent.target.innerHTML})\n  }\n  setBgColor (event) {\n    this.setState({color:{hex: event.target.getAttribute('data-id'), shade: event.target.getAttribute('data-shade'), hue: event.target.getAttribute('data-hue'), fontColor: event.target.getAttribute('data-fontcolor')}})\n  }\n\n  setLayout (event) {\n    this.setState({layout: event.target.id.toLocaleLowerCase()})\n  }\n\n  setFont (event) {\n    this.setState({font: event.family})\n  }\n\n  setTitleText (event) {\n    this.setState({titleText: event.nativeEvent.target.value})\n  }\n\n  swapItems (data, test) {\n    this.setState({itemsAdded: test})\n  }\n\n  addItems (event) {\n    let arr = this.state.itemsAdded;\n    if (this.state.itemsAdded.length < 3) {\n      arr.push(event.target.innerHTML)\n      this.setState({itemsAdded: arr})\n    } else {\n      return false\n    }\n    const buttons = document.querySelectorAll('button[slot=\"right\"]');\n    buttons.forEach(button => {\n      button.remove();\n    })\n  }\n\n  render () {\n    console.log('render')\n    return (\n      <div className=\"theme-builder\">\n        <div className={\"component-container\"}>\n          <YourComponent\n            title={\"App Bar\"}\n            showMenuIcon={this.state.showMenuIcon}\n            bgColor={this.state.primaryColorData.selectedHex}\n            menuIcon={this.state.menuIcon}\n            layout={this.state.layout}\n            font={this.state.font}\n            color={this.state.color}\n            titleText={this.state.titleText}\n            itemsAdded={this.state.itemsAdded}\n          >\n          </YourComponent>\n        </div>\n        <SelectionAndOutput\n          options={this.config.options}\n          layoutOptions={this.config.layout}\n          setLayout={this.setLayout}\n          layout={this.state.layout}\n          setFont={this.setFont}\n          font={this.state.font}\n          setBgColor={this.setBgColor}\n          color={this.state.color}\n          setMenuIcon={this.setMenuIcon}\n          setTitleText={this.setTitleText}\n          addItems={this.addItems}\n          itemsAdded={this.state.itemsAdded}\n          swapItems={this.swapItems}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}