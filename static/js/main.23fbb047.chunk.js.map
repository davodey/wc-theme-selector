{"version":3,"sources":["SelectBox.js","YourComponent.js","PrismComponent.js","Code.js","ColorPalatte.js","ColorTypeRadios.js","IconsSelect.js","Toggle.js","App.js","serviceWorker.js","index.js"],"names":["SelectBox","props","state","this","select","MDCSelect","document","querySelector","setState","theme","listen","value","prevProps","prevState","node","removeAttribute","setAttribute","className","id","disabled","themeChoices","map","item","key","uuid","style","width","htmlFor","label","Component","YourComponent","dangerouslySetInnerHTML","__html","bgColor","fontColor","showMenuIcon","title","position","menuicon","menuIcon","hideMenu","PrismCode","highlight","ref","current","Prism","highlightElement","React","createRef","copy","bind","textarea","createElement","copyText","textContent","target","appendChild","innerHTML","format","repeat","execCommand","remove","code","plugins","language","type","onClick","display","trim","Code","renderHTML","html","update","showIcon","console","log","color","ColorPalette","colorArr","Object","keys","colorData","forEach","colorKey","shadeKey","obj","hue","shade","hex","push","data","selectedName","selectedHex","selectedShade","data-id","data-hue","data-shade","background","RadioButtons","name","defaultChecked","ComboBox","Autocomplete","onChange","event","setMenuIcon","autoComplete","options","Data","icons","getOptionLabel","option","renderOption","selected","Fragment","marginLeft","renderInput","params","TextField","variant","fullWidth","Toggle","switchControl","MDCSwitch","role","App","colorType","primaryColorData","secondaryColorData","input","setIconButtons","buildIconButtons","textfield","MDCTextField","textFieldNode","addEventListener","swatches","tagName","getAttribute","radios","querySelectorAll","radio","toggle","checked","nativeEvent","stopImmediatePropagation","markup","createButton","buttonIcon","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23fbb047.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"@material/select/dist/mdc.select.css\";\nimport {MDCSelect} from '@material/select';\n\nimport uuid from 'uuid'\n\nclass SelectBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  componentDidMount() {\n    this.select = new MDCSelect(document.querySelector('.mdc-select'));\n    this.setState({theme: 'standard'})\n    this.select.listen('MDCSelect:change', () => {\n      this.setState({theme: this.select.value})\n    });\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const node = document.querySelector(this.props.node)\n    if (this.state.theme !== prevState.theme) {\n      node.removeAttribute(prevState.theme)\n      node.setAttribute('type', this.state.theme)\n    }\n  }\n  componentWillReceiveProps () {\n\n  }\n\n  render () {\n    return (\n      <div className=\"mdc-select mdc-select--outlined demo-select-outline-shaped\">\n        <i className=\"mdc-select__dropdown-icon\" />\n        <select id=\"shaped_outlined\" className=\"mdc-select__native-control\" value={this.state.theme}>\n          <option value disabled />\n          {\n            this.props.themeChoices.map(item => {\n              return (\n                <option key={uuid()} value={item}>{item}</option>\n              )\n            })\n          }\n        </select>\n        <div className=\"mdc-notched-outline mdc-notched-outline--upgraded mdc-notched-outline--notched\">\n          <div className=\"mdc-notched-outline__leading\" />\n          <div className=\"mdc-notched-outline__notch\" style={{width: '32.75px'}}><label htmlFor=\"shaped_outlined\" className=\"mdc-floating-label mdc-floating-label--float-above\" style={{}}>{this.props.label}</label></div>\n\n          <div className=\"mdc-notched-outline__trailing\" />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectBox;\n","import React, {Fragment} from \"react\";\nimport './Flayvor.css'\n\nconst YourComponent = (props) => {\n  return (\n    <Fragment>\n      <div id={\"css\"}>\n        <style dangerouslySetInnerHTML={{__html: `flayvor-top-app-bar {\n            background: ${props.bgColor};\n            color: ${props.fontColor}\n        }`}} />\n      </div>\n      <div id={\"markup\"}>\n        {props.showMenuIcon === true ?\n            <flayvor-top-app-bar\n              title={props.title}\n              position=\"static\"\n              menuicon={props.menuIcon}>\n            </flayvor-top-app-bar> :\n              <flayvor-top-app-bar\n                title={props.title}\n                position=\"static\"\n                hideMenu>\n              </flayvor-top-app-bar>\n          }\n      </div>\n    </Fragment>\n\n  );\n};\nexport default YourComponent\n","import React, {Fragment} from \"react\"\nimport Prism from \"prismjs\"\nimport format from \"html-format\"\nimport \"@material/button/dist/mdc.button.min.css\";\n\n\nexport class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n    this.copy = this.copy.bind(this)\n  }\n  componentDidMount() {\n    this.highlight()\n  }\n  componentDidUpdate() {\n    this.highlight()\n  }\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  copy () {\n    const textarea = document.createElement('textarea'),\n      copyText = document.querySelector(\"code\").textContent,\n      target = document.querySelector('#copyCapture');\n\n    textarea.id = \"codeInput\";\n    target.appendChild(textarea);\n    textarea.innerHTML = format(copyText, ' '.repeat(4));\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n  }\n  //https://stackoverflow.com/questions/39501289/in-reactjs-how-to-copy-text-to-clipboard\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n    <div id={\"copyCapture\"} className={this.props.type}>\n      <button onClick={this.copy} className=\"mdc-button mdc-button--dense\" style={{display: \"flex\"}}>\n        <i className=\"material-icons mdc-button__icon\">code</i>\n        <span className=\"mdc-button__label\">Copy</span>\n      </button>\n        <pre>\n          <code ref={this.ref} className={`language-${this.props.type}`}>\n            {code.trim()}\n          </code>\n      </pre>\n    </div>\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport format from \"html-format\"\n\nimport {PrismCode} from \"./PrismComponent\"\n\n\nclass Code extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.renderHTML = this.renderHTML.bind(this);\n  }\n\n  componentDidMount () {\n    if (this.props.type === \"html\") {\n      this.node = document.querySelector('#markup')\n      this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n    } else {\n      this.node=document.querySelector('#css style');\n      this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    this.node = document.querySelector('#markup');\n    if (this.props.type === \"html\") {\n      if (this.props.update !== prevProps.update || this.props.theme !== prevProps.theme || this.props.menuIcon !== prevProps.menuIcon || this.props.showIcon !== prevProps.showIcon  || this.props.title !== prevProps.title) {\n        this.node = document.querySelector('#markup');\n        console.log('MARKUP', this.node)\n        this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n      }\n    } else {\n      if (this.props.color !== prevProps.color || this.props.fontColor !== prevProps.fontColor) {\n        this.node=document.querySelector('#css style');\n        this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n      }\n    }\n\n  }\n  renderHTML () {\n\n    return (\n      `\n      ${this.state.html}\n    `\n    )\n  }\n\n  render () {\n    return (\n      <PrismCode\n        code={this.renderHTML()}\n        language={this.props.type}\n        plugins={[\"line-numbers\"]}\n        type={this.props.type}\n      />\n    )\n  }\n}\n\nexport default Code;\n\n","import React, { Component } from 'react';\nimport colorData from './colors';\nimport uuid from 'uuid';\n\nclass ColorPalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.colorArr = [];\n  }\n\n  componentWillMount() {\n    Object.keys(colorData).forEach(colorKey => {\n      Object.keys(colorData[colorKey]).forEach(shadeKey => {\n        const obj = {}\n        obj.hue = colorKey;\n        obj.shade = shadeKey;\n        obj.hex = colorData[colorKey][shadeKey];\n        this.colorArr.push(obj);\n      })\n    });\n  }\n\n\n  render () {\n    return (\n      <div className={\"color-palette card\"}>\n        <span className={'selection'}>{this.props.data.selectedName}\n        {this.props.data.selectedHex !== \"#000000\" && this.props.data.selectedHex !== \"#ffffff\" ? this.props.data.selectedShade : \"\"}\n        </span>\n        <div className={\"main-colors\"}>\n        {\n          this.colorArr.map(color => {\n            if (color.hue === this.props.data.selectedName && color.shade === '500') {\n              return (\n                <button key={uuid()} className={\"swatch selected\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n              )\n            }\n            if (color.shade === '500') {\n              return (\n                <button key={uuid()} className={\"swatch\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n              )\n            }\n            if (color.hex === '#ffffff') {\n              return (\n                <button key={uuid()} className={\"swatch white\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n                )\n            }\n          })\n        }\n        </div>\n\n\n        {\n          this.props.data.selectedHex !== \"#000000\" && this.props.data.selectedHex !== \"#ffffff\" ?\n\n            <div>\n              <div className={\"seperator\"}></div>\n              <span className={'selection'}>select a shade (optional)</span></div> :\n          <div></div>\n        }\n\n        <div className={\"optional-colors\"}>\n          {\n            this.colorArr.map(color => {\n              if (color.hex === this.props.data.selectedHex && color.hex !== \"#000000\" && color.hex !== \"#ffffff\") {\n                return (\n                  <button key={uuid()} className={\"swatch selected\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n                )\n              } else if (color.hue === this.props.data.selectedName && color.hex !== \"#000000\" && color.hex !== \"#ffffff\") {\n                return (\n                  <button key={uuid()} className={\"swatch\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n                )\n              }\n\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ColorPalette;\n\n\n","import React, {Component, Fragment} from 'react';\nimport {MDCFormField} from '@material/form-field';\nimport {MDCRadio} from '@material/radio';\n\nimport \"@material/form-field/dist/mdc.form-field.css\";\nimport \"@material/radio/dist/mdc.radio.css\";\n\nimport uuid from 'uuid'\n\nclass RadioButtons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n\n\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"mdc-form-field\">\n          <div className=\"mdc-radio primary\">\n            <input className=\"mdc-radio__native-control\" type=\"radio\" id=\"primaryRadio\" name=\"radios\" defaultChecked/>\n            <div className=\"mdc-radio__background\">\n              <div className=\"mdc-radio__outer-circle\" />\n              <div className=\"mdc-radio__inner-circle\" />\n            </div>\n          </div>\n          <label htmlFor=\"primaryRadio\">Background Color</label>\n        </div>\n\n        <div className=\"mdc-form-field\">\n          <div className=\"mdc-radio secondary\">\n            <input className=\"mdc-radio__native-control\" type=\"radio\" id=\"secondaryRadio\" name=\"radios\"/>\n            <div className=\"mdc-radio__background\">\n              <div className=\"mdc-radio__outer-circle\" />\n              <div className=\"mdc-radio__inner-circle\" />\n            </div>\n          </div>\n          <label htmlFor=\"secondaryRadio\">Font Color</label>\n        </div>\n      </Fragment>\n\n    )\n  }\n}\n\nexport default RadioButtons\n","/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Data from './icons'\n\nexport default function ComboBox(props) {\n  return (\n    <Autocomplete\n      onChange={(event, value)=> {\n        props.setMenuIcon(value)\n      }}\n\n      autoComplete={true}\n      id=\"combo-box-demo\"\n      options={Data.icons}\n      getOptionLabel={option => option.label}\n      renderOption={(option, { selected }) => (\n        <React.Fragment>\n          <i className=\"material-icons\">\n            {option.label}\n          </i>\n          <span style={{display: 'inline-block', marginLeft: \"8px\"}}>{option.label}</span>\n        </React.Fragment>\n      )}\n      style={{ width: 300 }}\n      renderInput={params => (\n        <TextField {...params}  label=\"Select menu icon\" variant=\"outlined\" fullWidth ></TextField>\n      )}\n    />\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport {MDCSwitch} from '@material/switch';\nimport \"@material/switch/dist/mdc.switch.css\";\nclass Toggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n  componentDidMount () {\n    this.switchControl = new MDCSwitch(document.querySelector('.mdc-switch'));\n  }\n  render () {\n    return (\n      <div>\n        <div className=\"mdc-switch\">\n          <div className=\"mdc-switch__track\" />\n          <div className=\"mdc-switch__thumb-underlay\">\n            <div className=\"mdc-switch__thumb\">\n              <input type=\"checkbox\" id=\"menuToggle\" className=\"mdc-switch__native-control\" role=\"switch\" defaultChecked={true} />\n            </div>\n          </div>\n        </div>\n        <label htmlFor=\"basic-switch\" style={{marginLeft:'24px'}}>\n          {\n            this.props.showMenuIcon === true ?\n              'Menu icon on' :\n              'Menu icon off'\n          }\n        </label>\n      </div>\n    )\n  }\n}\n\nexport default Toggle;\n","import React, {Component, Fragment} from 'react';\nimport SelectBox from './SelectBox'\nimport YourComponent from './YourComponent'\nimport 'normalize.css'\nimport './App.css';\nimport \"@material/textfield/dist/mdc.textfield.css\";\nimport Code from \"./Code\";\nimport {MDCSelect} from \"@material/select\";\nimport {MDCTextField} from '@material/textfield';\nimport ColorPalette from \"./ColorPalatte\";\nimport RadioButtons from \"./ColorTypeRadios\";\nimport IconSelect from './IconsSelect'\nimport Toggle from \"./Toggle\";\nimport {MDCRipple} from '@material/ripple';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorType: \"primary\",\n      menuIcon: \"menu\",\n      primaryColorData: {},\n      secondaryColorData: {},\n      showMenuIcon: true,\n      input: ''\n    };\n\n    this.themeChoices = [\n      'standard',\n      'dense',\n      'prominent',\n      'collapsed',\n      'short',\n      'fixed'\n    ]\n\n    this.setMenuIcon = this.setMenuIcon.bind(this);\n    this.setIconButtons = this.setIconButtons.bind(this);\n    this.buildIconButtons = this.buildIconButtons.bind(this)\n  }\n\n  componentWillMount () {\n    this.setState({primaryColorData: {\n        selectedHex: '#f44336',\n        selectedName: 'red',\n        selectedShade: '500'\n      }});\n\n    this.setState({secondaryColorData: {\n        selectedHex: '#ffffff',\n        selectedName: 'white',\n        selectedShade: '500'\n      }});\n\n\n\n  }\n\n  componentDidMount() {\n    this.setState({theme: 'dense'})\n    this.setState({input: \"Flayvor Top App Bar\"})\n    this.select = new MDCSelect(document.querySelector('.mdc-select'));\n    this.textfield = new MDCTextField(document.querySelector('.mdc-text-field'));\n\n    this.textFieldNode = document.querySelector('.mdc-text-field input');\n    this.select.listen('MDCSelect:change', () => {\n      this.setState({theme: this.select.value});\n      this.theme = this.select.value\n    });\n\n    this.textFieldNode.addEventListener('input', event => {\n      this.setState({input: event.target.value});\n    })\n\n    this.swatches = document.querySelector('.color-palette');\n    this.swatches.addEventListener('click', event => {\n      if (event.target.tagName !== \"DIV\") {\n        if (this.state.colorType === \"primary\") {\n          this.setState({primaryColorData: {\n              selectedHex: event.target.getAttribute('data-id'),\n              selectedName: event.target.getAttribute('data-hue'),\n              selectedShade: event.target.getAttribute('data-shade')\n            }});\n        } else {\n          this.setState({secondaryColorData: {\n              selectedHex: event.target.getAttribute('data-id'),\n              selectedName: event.target.getAttribute('data-hue'),\n              selectedShade: event.target.getAttribute('data-shade')\n            }});\n        }\n      }\n    })\n\n    this.radios = document.querySelectorAll('input[type=\"radio\"]');\n      this.radios.forEach(radio => {\n        radio.addEventListener('click', event => {\n          if (event.target.id === 'primaryRadio') {\n            this.setState({colorType: \"primary\"})\n          } else {\n            this.setState({colorType: \"secondary\"})\n          }\n        })\n      })\n    this.toggle = document.querySelector('#menuToggle');\n      this.toggle.addEventListener('change',event => {\n       this.setState({showMenuIcon: event.target.checked})\n      })\n  }\n\n  componentDidUpdate (prevProps, prevState){\n    if (this.state.colorType !== prevState.colorType) {\n      if (this.state.colorType === 'primary') {\n        this.setState({data: prevState.primaryColorData})\n      } else {\n        this.setState({data: prevState.secondaryColorData})\n      }\n    }\n    console.log('updated')\n  }\n\n  buildIconButtons (event) {\n    event.nativeEvent.stopImmediatePropagation()\n    const markup = document.querySelector('#markup flayvor-top-app-bar'),\n      createButton = document.createElement('button');\n\n    createButton.setAttribute('slot', 'right');\n    createButton.innerHTML = this.state.buttonIcon;\n    console.log(createButton)\n    markup.appendChild(createButton)\n    this.setState({'update': !this.state.update})\n  }\n\n  setIconButtons (value) {\n    console.log(value.label)\n    this.setState({buttonIcon: value.label})\n  }\n\n  setMenuIcon (value) {\n    if (value === null) {\n      this.setState({menuIcon: 'menu'})\n    } else {\n      this.setState({menuIcon: value.label})\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <div className={\"demo-selector\"}>\n          <div className={\"col left\"}>\n            <div className={\"row\"}>\n            <SelectBox themeChoices={this.themeChoices}\n                       label={\"Select your theme\"}\n                       node={'flayvor-top-app-bar'}\n            />\n            </div>\n            <div className={\"row\"}>\n              <RadioButtons/>\n              <ColorPalette data={\n                this.state.colorType === \"primary\" ? this.state.primaryColorData : this.state.secondaryColorData\n              } colorType={this.state.colorType}/>\n            </div>\n            <div className={\"row menu-icon\"}>\n              <Toggle showMenuIcon={this.state.showMenuIcon}/>\n              {\n                this.state.showMenuIcon ? <IconSelect setMenuIcon={this.setMenuIcon} value={this.state.menuIcon}/>: <Fragment></Fragment>\n              }\n            </div>\n            <div className={\"row\"}>\n              <div className=\"mdc-text-field mdc-text-field--outlined\" style={{width: '100%'}}>\n                <input className=\"mdc-text-field__input\" id=\"text-field-hero-input\" />\n                <div className=\"mdc-notched-outline\">\n                  <div className=\"mdc-notched-outline__leading\" />\n                  <div className=\"mdc-notched-outline__notch\">\n                    <label htmlFor=\"text-field-hero-input\" className=\"mdc-floating-label\">Title</label>\n                  </div>\n                  <div className=\"mdc-notched-outline__trailing\" />\n                </div>\n              </div>\n            </div>\n            <div className={\"row\"} style={{display:\"flex\"}}>\n              <IconSelect setMenuIcon={this.setIconButtons} value={this.state.buttonIcon}/>\n              <button onClick={this.buildIconButtons} className=\"mdc-button mdc-button--dense mdc-button--unelevated demo-button-shaped mdc-ripple-upgraded\">\n                <span className=\"mdc-button__ripple\"></span>\n                <span className=\"mdc-button__label\">Add</span>\n              </button>\n            </div>\n          </div>\n          <div className={\"col right\"}>\n            <div className={\"row\"}>\n              <YourComponent title={this.state.input} showMenuIcon={this.state.showMenuIcon} bgColor={this.state.primaryColorData.selectedHex} fontColor={this.state.secondaryColorData.selectedHex} menuIcon={this.state.menuIcon}></YourComponent>\n            </div>\n            <div className={\"row\"}>\n              <Code type={\"html\"} update={this.state.update} theme={this.state.theme} menuIcon={this.state.menuIcon} showIcon={this.state.showMenuIcon} title={this.state.input}/>\n            </div>\n            <div className={\"row\"}>\n              <Code type={\"css\"} theme={this.state.theme} color={this.state.primaryColorData.selectedHex} fontColor={this.state.secondaryColorData.selectedHex} menuIcon={this.state.menuIcon}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}