{"version":3,"sources":["components/YourComponent.js","components/Options.js","components/OptionRadio.js","containers/ColorPalatte.js","components/Output.js","containers/SelectionAndOutput.js","containers/App.js","serviceWorker.js","index.js"],"names":["YourComponent","props","id","dangerouslySetInnerHTML","__html","color","hex","font","fontColor","className","showMenuIcon","title","position","menuicon","menuIcon","type","layout","buttonsBuilt","length","map","button","index","key","slot","data-index","hideMenu","Options","options","option","onClick","data-text","replace","optionSelected","OptionRadio","item","onChange","name","checked","toLowerCase","ColorPalette","state","colorArr","Object","keys","colorData","forEach","colorKey","shadeKey","obj","hue","shade","push","this","parseInt","style","data-id","data-hue","data-shade","data-fontcolor","bgColor","Component","Output","setLayout","layoutOptions","activeFontFamily","setFont","apiKey","setBgColor","SelectionAndOutput","selectOption","bind","nextProps","nextState","prevProps","prevState","event","setState","nativeEvent","target","getAttribute","App","colorType","primaryColorData","secondaryColorData","input","config","console","log","toLocaleLowerCase","family","selectedHex","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cceeab6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst YourComponent = (props) => {\n  return (\n    <div>\n      <div id={\"css\"}>\n        <style dangerouslySetInnerHTML={{__html: `flayvor-top-app-bar {\n            background: ${props.color.hex};\n            font-family:\"${props.font}\";\n            color:${props.color.fontColor};\n        }`}} />\n      </div>\n      <div id={\"markup\"} className={\"apply-font\"}>\n        {props.showMenuIcon === true ?\n          <flayvor-top-app-bar\n            title={props.title}\n            position=\"static\"\n            menuicon={props.menuIcon}\n            type={props.layout}\n          >\n\n            {\n              props.buttonsBuilt.length > 0 ?\n                props.buttonsBuilt.map((button,index) => {\n                  return (\n                    <button key={index}\n                            slot=\"right\"\n                            data-index={index}\n                            className=\"material-icons mdc-icon-button mdc-top-app-bar__action-item\">\n                      {button}\n                    </button>\n                  )\n                }) : <div></div>\n            }\n          </flayvor-top-app-bar> :\n          <flayvor-top-app-bar\n            title={props.title}\n            position=\"static\"\n            type={props.layout}\n            hideMenu>\n            {\n              props.buttonsBuilt.length > 0 ?\n                props.buttonsBuilt.map((button,index) => {\n                  return (\n                    <button key={index}\n                            slot=\"right\"\n                            data-index={index}\n                            className=\"material-icons mdc-icon-button mdc-top-app-bar__action-item\">\n                      {button}\n                    </button>\n                  )\n                }) : <div></div>\n            }\n          </flayvor-top-app-bar>\n        }\n      </div>\n    </div>\n  );\n};\nexport default YourComponent\n","import React from \"react\";\n\nconst Options = (props) => {\n  return (\n    <div className={\"selection\"}>\n      <span>Options:</span>\n      <nav>\n        <ul>\n          {\n            props.options.map((option, index) => {\n              return (\n                <li key={index}>\n                  <button\n                    onClick={props.onClick}\n                    data-text={option}\n                    id={option.\n                    replace(/\\s/g, '')}\n                    className={props.optionSelected === option ? \"active\" : \"\"}\n                  >{option}\n                  </button>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </nav>\n    </div>\n  );\n};\nexport default Options\n\n","import React, {Fragment} from \"react\";\n\nconst OptionRadio = (props) => {\n  return (\n\n      <fieldset>\n        <div className={\"control-group\"}>\n          {\n            props.options.map((item,index) => {\n              return (\n                <Fragment key={index}>\n                  <label className=\"control control-radio\">\n                    {item}\n                    <input onChange={props.onChange} id={item} type=\"radio\" name=\"radio\" checked={props.layout === item.toLowerCase()}/>\n                    <div className=\"control_indicator\"></div>\n                  </label>\n                </Fragment>\n              )\n            })\n          }\n        </div>\n      </fieldset>\n  );\n};\nexport default OptionRadio\n\n","import React, {Component, Fragment} from 'react';\nimport colorData from '../assets/colors';\n\nclass ColorPalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.colorArr = [];\n  }\n\n  componentWillMount() {\n    Object.keys(colorData).forEach(colorKey => {\n      Object.keys(colorData[colorKey]).forEach(shadeKey => {\n        const obj = {}\n        obj.hue = colorKey;\n        obj.shade = shadeKey;\n        obj.hex = colorData[colorKey][shadeKey];\n        obj.fontColor = 'black';\n        this.colorArr.push(obj);\n      })\n    });\n  }\n\n  componentDidMount() {\n    this.colorArr.map(color => {\n      if (color.hue === 'black') {\n        color.fontColor = 'white'\n      }\n      if (color.hue === 'purple' || color.hue === 'deeppurple' || color.hue === 'indigo' || color.hue === 'brown') {\n        if (color.shade === '300') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 400 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'red' || color.hue === 'pink'  || color.hue === 'purple' || color.hue === 'deeppurple' || color.hue === 'indigo' || color.hue === 'brown' || color.hue === 'bluegrey') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 500 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'teal' || color.hue === 'green') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 600 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'blue' || color.hue === 'green' || color.hue === 'deeporange' || color.hue === 'grey') {\n          color.fontColor = 'white'\n        }\n      }\n      if (color.shade === 'a200' || color.shade ==='a400' || color.shade === 'a700') {\n        if (color.hue === 'red' || color.hue === 'pink' || color.hue === 'purple' || color.hue === 'deeppurple' || color.hue === 'indigo' || color.hue === 'blue') {\n          color.fontColor = 'white'\n        }\n      }\n      if (parseInt(color.shade) >= 700 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'lightblue' || color.hue === 'cyan') {\n          color.fontColor = 'white';\n        }\n      }\n      if (color.shade === 'a700' && color.hue === 'lightblue') {\n        color.fontColor = 'white'\n      }\n      if (parseInt(color.shade) >= 800 && parseInt(color.shade) <= 900) {\n        if (color.hue === 'lightgreen') {\n          color.fontColor = 'white';\n        }\n      }\n      if (parseInt(color.shade) === 900) {\n        if (color.hue === 'lime' || color.hue === 'orange') {\n          color.fontColor = 'white';\n        }\n      }\n      if (color.shade ==='a400' || color.shade === 'a700') {\n        if (color.hue === 'red' || color.hue === 'deeporange') {\n          color.fontColor = 'white'\n        }\n      }\n    })\n  }\n\n  render () {\n    return (\n      <Fragment>\n        <div className={\"color-palatte\"}>\n          {\n            this.colorArr.map((color,index) => {\n              if (color.shade === '500') {\n                return (\n                  <button key={index} className={this.props.color.hue === color.hue? 'color active ' + color.fontColor : 'color ' + color.fontColor} style={{'backgroundColor': color.hex}} onClick={this.props.onClick} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} data-fontcolor={color.fontColor}><span>{color.hue}</span></button>\n                )\n              }\n            })\n          }\n        </div>\n        <div className={\"color-palatte sub\"}>\n          {\n            this.colorArr.map((color,index) => {\n              if (color.hue === this.props.color.hue) {\n                return (\n                  <button key={index} className={this.props.bgColor === color.hex && color.hue !== 'black' && color.hue !== 'white'  ? 'color active ' + color.fontColor: 'color ' + color.fontColor} style={{'backgroundColor': color.hex}} onClick={this.props.onClick} data-id={color.hex} data-hue={color.hue} data-shade={color.shade}  data-fontcolor={color.fontColor}>{color.shade}</button>\n                )\n              }\n            })\n          }\n        </div>\n      </Fragment>\n\n    )\n  }\n}\n\nexport default ColorPalette;\n\n\n","import React, {Fragment} from \"react\";\nimport OptionRadio from \"./OptionRadio\";\nimport FontPicker from \"font-picker-react\";\nimport ColorPalette from \"../containers/ColorPalatte\";\n\nconst Output = (props) => {\n  return (\n    <div className={\"output\"}>\n      <span>\n      {\n        props.optionSelected === \"Layout\" ? \"Select a layout\" :\n        props.optionSelected === \"Typography\" ? \"Select a font family\" :\n        props.optionSelected === \"Color\" ? \"Select your background color\" :\n        props.optionSelected === \"Menu icon\" ? \"Change your menu icon\" :\n        props.optionSelected === \"Title\" ? \"Change your title\" :\n        props.optionSelected === \"Add items\" ? \"Add menu buttons\" :\n          \"Generate your HTML & CSS Code\"\n      }\n      </span>\n      <div className={\"content\"}>\n        <div className={\"description\"}>\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus accumsan, neque id congue fermentum, sapien nisi vehicula neque, id pharetra orci erat quis velit.</p>\n        </div>\n        {\n          props.optionSelected === 'Layout' ?\n            <OptionRadio layout={props.layout} onChange={props.setLayout} options={props.layoutOptions}/> :\n          props.optionSelected === 'Typography' ?\n            <FontPicker activeFontFamily={props.font} onChange={props.setFont} apiKey=\"AIzaSyAMJM5phI4GbCGR8Dcu8rIlxFxOermsVDM\"/> :\n          props.optionSelected === 'Color' ?\n            <ColorPalette color={props.color} bgColor={props.bgColor} onClick={props.setBgColor}/> :\n            <Fragment></Fragment>\n        }\n      </div>\n    </div>\n  );\n};\nexport default Output\n\n","// State held component not using Redux\nimport React, {Component} from 'react';\nimport Options from \"../components/Options\";\nimport Output from \"../components/Output\";\n\nclass SelectionAndOutput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      optionSelected: 'Color'\n    };\n    this.selectOption = this.selectOption.bind(this);\n  }\n\n  // COMPONENT INIT\n  // componentWillMount is called before the render method is executed.\n  // It is important to note that setting the state in this phase will not trigger a re-rendering.\n  componentWillMount() {\n\n  }\n\n  // The DOM can be accessed in this method, enabling to define DOM manipulations or data fetching operations.\n  // Any DOM interactions should always happen in this phase not inside the render method.\n  componentDidMount() {\n\n  }\n\n  // COMPONENT STATE UPDATES\n  // shouldComponentUpdate is always called before the render method and enables to define if a re-rendering is needed or can be skipped.\n  // Obviously this method is never called on initial rendering. A boolean value must be returned.\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.props !== nextProps || this.state !== nextState) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // componentWillUpdate gets called as soon as the the shouldComponentUpdate returned true.\n  // Any state changes via this.setState are not allowed as this method should be strictly used\n  // to prepare for an upcoming update not trigger an update itself.\n\n\n  // componentDidUpdate is called after the render method. Similar to the componentDidMount,\n  // this method can be used to perform DOM operations after the data has been updated.\n  componentDidUpdate (prevProps, prevState) {\n\n  }\n\n  // UPDATE PROPS\n  // componentWillReceiveProps is only called when the props have changed and when this is not an initial rendering.\n  // componentWillReceiveProps enables to update the state depending on the existing and upcoming props, without triggering another rendering.\n  // One interesting thing to remember here is that there is no equivalent method for the state as state changes should never trigger any props changes.\n  componentWillReceiveProps () {\n\n  }\n\n  selectOption (event) {\n    this.setState({optionSelected: event.nativeEvent.target.getAttribute('data-text')})\n  }\n\n  render () {\n    return (\n      <div className={\"selection-and-output\"}>\n        <Options\n          options={this.props.options}\n          onClick={this.selectOption}\n          optionSelected={this.state.optionSelected}\n        />\n        <Output\n          optionSelected={this.state.optionSelected}\n          layoutOptions={this.props.layoutOptions}\n          setLayout={this.props.setLayout}\n          layout={this.props.layout}\n          setFont={this.props.setFont}\n          font={this.props.font}\n          setBgColor={this.props.setBgColor}\n          bgColor={this.props.color.hex}\n          color={this.props.color}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SelectionAndOutput;\n\n","// State held component not using Redux\nimport React, {Component} from 'react';\nimport '../App.css';\nimport YourComponent from \"../components/YourComponent\";\nimport SelectionAndOutput from \"./SelectionAndOutput\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorType: \"primary\",\n      menuIcon: \"menu\",\n      primaryColorData: {},\n      secondaryColorData: {},\n      showMenuIcon: true,\n      input: '',\n      buttonsBuilt: [],\n      font: \"Open Sans\",\n      layout: 'standard',\n      color: {\n        hex: \"#f44336\",\n        hue: \"red\",\n        shade: \"500\",\n        fontColor: \"white\"\n      },\n    };\n    this.config = {\n      options: [\n        'Layout', 'Typography', 'Color', 'Menu icon', 'Title', 'Add items', 'Generate code'\n      ],\n      layout: [\n        'Standard', 'Dense', 'Prominent', 'Collapsed', 'Short', 'Fixed'\n      ]\n    }\n    this.setLayout = this.setLayout.bind(this);\n    this.setFont = this.setFont.bind(this);\n    this.setBgColor = this.setBgColor.bind(this);\n  }\n\n  // COMPONENT INIT\n  // componentWillMount is called before the render method is executed.\n  // It is important to note that setting the state in this phase will not trigger a re-rendering.\n  componentWillMount() {\n\n  }\n\n  // The DOM can be accessed in this method, enabling to define DOM manipulations or data fetching operations.\n  // Any DOM interactions should always happen in this phase not inside the render method.\n  componentDidMount() {\n\n  }\n\n  // COMPONENT STATE UPDATES\n  // shouldComponentUpdate is always called before the render method and enables to define if a re-rendering is needed or can be skipped.\n  // Obviously this method is never called on initial rendering. A boolean value must be returned.\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.props !== nextProps || this.state !== nextState) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // componentWillUpdate gets called as soon as the the shouldComponentUpdate returned true.\n  // Any state changes via this.setState are not allowed as this method should be strictly used\n  // to prepare for an upcoming update not trigger an update itself.\n\n\n  // componentDidUpdate is called after the render method. Similar to the componentDidMount,\n  // this method can be used to perform DOM operations after the data has been updated.\n  componentDidUpdate (prevProps, prevState) {\n\n  }\n\n  // UPDATE PROPS\n  // componentWillReceiveProps is only called when the props have changed and when this is not an initial rendering.\n  // componentWillReceiveProps enables to update the state depending on the existing and upcoming props, without triggering another rendering.\n  // One interesting thing to remember here is that there is no equivalent method for the state as state changes should never trigger any props changes.\n  componentWillReceiveProps () {\n\n  }\n\n  setBgColor (event) {\n    console.log(event.target.getAttribute('data-fontcolor'))\n    this.setState({color:{hex: event.target.getAttribute('data-id'), shade: event.target.getAttribute('data-shade'), hue: event.target.getAttribute('data-hue'), fontColor: event.target.getAttribute('data-fontcolor')}})\n  }\n\n  setLayout (event) {\n    this.setState({layout: event.target.id.toLocaleLowerCase()})\n  }\n\n  setFont (event) {\n    this.setState({font: event.family})\n  }\n\n  render () {\n    console.log(this.state.fontColor)\n    return (\n      <div className=\"theme-builder\">\n        <div className={\"component-container\"}>\n          <YourComponent\n            buttonsBuilt={this.state.buttonsBuilt}\n            title={\"App Bar\"}\n            showMenuIcon={this.state.showMenuIcon}\n            bgColor={this.state.primaryColorData.selectedHex}\n            menuIcon={this.state.menuIcon}\n            layout={this.state.layout}\n            font={this.state.font}\n            color={this.state.color}\n          >\n          </YourComponent>\n        </div>\n        <SelectionAndOutput\n          options={this.config.options}\n          layoutOptions={this.config.layout}\n          setLayout={this.setLayout}\n          layout={this.state.layout}\n          setFont={this.setFont}\n          font={this.state.font}\n          setBgColor={this.setBgColor}\n          color={this.state.color}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}