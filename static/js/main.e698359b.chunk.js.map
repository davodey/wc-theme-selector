{"version":3,"sources":["SelectBox.js","YourComponent.js","PrismComponent.js","Code.js","ColorPalatte.js","ColorTypeRadios.js","IconsSelect.js","Toggle.js","Chip.js","App.js","serviceWorker.js","index.js"],"names":["SelectBox","props","state","this","select","MDCSelect","document","querySelector","setState","theme","listen","value","prevProps","prevState","node","removeAttribute","setAttribute","className","id","disabled","themeChoices","map","item","key","uuid","style","width","htmlFor","label","Component","YourComponent","console","log","dangerouslySetInnerHTML","__html","bgColor","fontColor","showMenuIcon","title","position","menuicon","menuIcon","buttonsBuilt","length","button","index","slot","data-index","hideMenu","PrismCode","highlight","ref","current","Prism","highlightElement","React","createRef","copy","bind","textarea","createElement","copyText","textContent","target","appendChild","innerHTML","format","repeat","execCommand","remove","code","plugins","language","type","onClick","display","trim","Code","renderHTML","html","update","showIcon","color","ColorPalette","colorArr","Object","keys","colorData","forEach","colorKey","shadeKey","obj","hue","shade","hex","push","data","selectedName","selectedHex","selectedShade","data-id","data-hue","data-shade","background","RadioButtons","name","defaultChecked","ComboBox","Autocomplete","onChange","event","setMenuIcon","autoComplete","options","Data","icons","getOptionLabel","option","renderOption","selected","Fragment","marginLeft","renderInput","params","TextField","variant","fullWidth","Toggle","switchControl","MDCSwitch","role","Chip","tabIndex","chipSetEl","MDCChipSet","App","colorType","primaryColorData","secondaryColorData","input","setIconButtons","buildIconButtons","removeButtonNodes","shadowRoot","querySelectorAll","arr","selectedIndex","nativeEvent","getAttribute","splice","textfield","MDCTextField","textFieldNode","addEventListener","swatches","tagName","radios","radio","toggle","checked","buttonIcon","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e698359b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"@material/select/dist/mdc.select.css\";\nimport {MDCSelect} from '@material/select';\n\nimport uuid from 'uuid'\n\nclass SelectBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  componentDidMount() {\n    this.select = new MDCSelect(document.querySelector('.mdc-select'));\n    this.setState({theme: 'standard'})\n    this.select.listen('MDCSelect:change', () => {\n      this.setState({theme: this.select.value})\n    });\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const node = document.querySelector(this.props.node)\n    if (this.state.theme !== prevState.theme) {\n      node.removeAttribute(prevState.theme)\n      node.setAttribute('type', this.state.theme)\n    }\n  }\n  componentWillReceiveProps () {\n\n  }\n\n  render () {\n    return (\n      <div className=\"mdc-select mdc-select--outlined demo-select-outline-shaped\">\n        <i className=\"mdc-select__dropdown-icon\" />\n        <select id=\"shaped_outlined\" className=\"mdc-select__native-control\" value={this.state.theme}>\n          <option value disabled />\n          {\n            this.props.themeChoices.map(item => {\n              return (\n                <option key={uuid()} value={item}>{item}</option>\n              )\n            })\n          }\n        </select>\n        <div className=\"mdc-notched-outline mdc-notched-outline--upgraded mdc-notched-outline--notched\">\n          <div className=\"mdc-notched-outline__leading\" />\n          <div className=\"mdc-notched-outline__notch\" style={{width: '32.75px'}}><label htmlFor=\"shaped_outlined\" className=\"mdc-floating-label mdc-floating-label--float-above\" style={{}}>{this.props.label}</label></div>\n\n          <div className=\"mdc-notched-outline__trailing\" />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectBox;\n","import React, {Component, Fragment} from 'react';\nimport './Flayvor.css'\n\nclass YourComponent extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidUpdate() {\n    console.log('update buttons')\n  }\n  render() {\n      console.log('render')\n    return (\n      <Fragment>\n        <div id={\"css\"}>\n          <style dangerouslySetInnerHTML={{__html: `flayvor-top-app-bar {\n            background: ${this.props.bgColor};\n            color: ${this.props.fontColor}\n        }`}} />\n        </div>\n        <div id={\"markup\"}>\n          {this.props.showMenuIcon === true ?\n            <flayvor-top-app-bar\n              title={this.props.title}\n              position=\"static\"\n              menuicon={this.props.menuIcon}>\n              {\n                this.props.buttonsBuilt.length > 0 ?\n                  this.props.buttonsBuilt.map((button,index) => {\n                    return (\n                      <button key={index} slot=\"right\" data-index={index}\n                              className=\"material-icons mdc-icon-button mdc-top-app-bar__action-item\">{button}\n                      </button>\n                    )\n                  }) : <Fragment></Fragment>\n              }\n            </flayvor-top-app-bar> :\n            <flayvor-top-app-bar\n              title={this.props.title}\n              position=\"static\"\n              hideMenu>\n              {\n                this.props.buttonsBuilt.length > 0 ?\n                  this.props.buttonsBuilt.map((button,index) => {\n                    return (\n                      <button key={index} slot=\"right\" data-index={index}\n                              className=\"material-icons mdc-icon-button mdc-top-app-bar__action-item\">{button}\n                      </button>\n                    )\n                  }) : <Fragment></Fragment>\n              }\n            </flayvor-top-app-bar>\n          }\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default YourComponent\n","import React, {Fragment} from \"react\"\nimport Prism from \"prismjs\"\nimport format from \"html-format\"\nimport \"@material/button/dist/mdc.button.min.css\";\n\n\nexport class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n    this.copy = this.copy.bind(this)\n  }\n  componentDidMount() {\n    this.highlight()\n  }\n  componentDidUpdate() {\n    this.highlight()\n  }\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  copy () {\n    const textarea = document.createElement('textarea'),\n      copyText = document.querySelector(\"code\").textContent,\n      target = document.querySelector('#copyCapture');\n\n    textarea.id = \"codeInput\";\n    target.appendChild(textarea);\n    textarea.innerHTML = format(copyText, ' '.repeat(4));\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n  }\n  //https://stackoverflow.com/questions/39501289/in-reactjs-how-to-copy-text-to-clipboard\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n    <div id={\"copyCapture\"} className={this.props.type}>\n      <button onClick={this.copy} className=\"mdc-button mdc-button--dense\" style={{display: \"flex\"}}>\n        <i className=\"material-icons mdc-button__icon\">code</i>\n        <span className=\"mdc-button__label\">Copy</span>\n      </button>\n        <pre>\n          <code ref={this.ref} className={`language-${this.props.type}`}>\n            {code.trim()}\n          </code>\n      </pre>\n    </div>\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport format from \"html-format\"\n\nimport {PrismCode} from \"./PrismComponent\"\n\n\nclass Code extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.renderHTML = this.renderHTML.bind(this);\n  }\n\n  componentDidMount () {\n    if (this.props.type === \"html\") {\n      this.node = document.querySelector('#markup')\n      this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n    } else {\n      this.node=document.querySelector('#css style');\n      this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    this.node = document.querySelector('#markup');\n    if (this.props.type === \"html\") {\n      if (this.props.update !== prevProps.update || this.props.theme !== prevProps.theme || this.props.menuIcon !== prevProps.menuIcon || this.props.showIcon !== prevProps.showIcon  || this.props.title !== prevProps.title) {\n        this.node = document.querySelector('#markup');\n        console.log('MARKUP', this.node)\n        this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n      }\n    } else {\n      if (this.props.color !== prevProps.color || this.props.fontColor !== prevProps.fontColor) {\n        this.node=document.querySelector('#css style');\n        this.setState({html: format(this.node.innerHTML, ' '.repeat(4))})\n      }\n    }\n\n  }\n  renderHTML () {\n\n    return (\n      `\n      ${this.state.html}\n    `\n    )\n  }\n\n  render () {\n    return (\n      <PrismCode\n        code={this.renderHTML()}\n        language={this.props.type}\n        plugins={[\"line-numbers\"]}\n        type={this.props.type}\n      />\n    )\n  }\n}\n\nexport default Code;\n\n","import React, { Component } from 'react';\nimport colorData from './colors';\nimport uuid from 'uuid';\n\nclass ColorPalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.colorArr = [];\n  }\n\n  componentWillMount() {\n    Object.keys(colorData).forEach(colorKey => {\n      Object.keys(colorData[colorKey]).forEach(shadeKey => {\n        const obj = {}\n        obj.hue = colorKey;\n        obj.shade = shadeKey;\n        obj.hex = colorData[colorKey][shadeKey];\n        this.colorArr.push(obj);\n      })\n    });\n  }\n\n\n  render () {\n    return (\n      <div className={\"color-palette card\"}>\n        <span className={'selection'}>{this.props.data.selectedName}\n        {this.props.data.selectedHex !== \"#000000\" && this.props.data.selectedHex !== \"#ffffff\" ? this.props.data.selectedShade : \"\"}\n        </span>\n        <div className={\"main-colors\"}>\n        {\n          this.colorArr.map(color => {\n            if (color.hue === this.props.data.selectedName && color.shade === '500') {\n              return (\n                <button key={uuid()} className={\"swatch selected\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n              )\n            }\n            if (color.shade === '500') {\n              return (\n                <button key={uuid()} className={\"swatch\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n              )\n            }\n            if (color.hex === '#ffffff') {\n              return (\n                <button key={uuid()} className={\"swatch white\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n                )\n            }\n          })\n        }\n        </div>\n\n\n        {\n          this.props.data.selectedHex !== \"#000000\" && this.props.data.selectedHex !== \"#ffffff\" ?\n\n            <div>\n              <div className={\"seperator\"}></div>\n              <span className={'selection'}>select a shade (optional)</span></div> :\n          <div></div>\n        }\n\n        <div className={\"optional-colors\"}>\n          {\n            this.colorArr.map(color => {\n              if (color.hex === this.props.data.selectedHex && color.hex !== \"#000000\" && color.hex !== \"#ffffff\") {\n                return (\n                  <button key={uuid()} className={\"swatch selected\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n                )\n              } else if (color.hue === this.props.data.selectedName && color.hex !== \"#000000\" && color.hex !== \"#ffffff\") {\n                return (\n                  <button key={uuid()} className={\"swatch\"} data-id={color.hex} data-hue={color.hue} data-shade={color.shade} style={{background: color.hex}}></button>\n                )\n              }\n\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ColorPalette;\n\n\n","import React, {Component, Fragment} from 'react';\nimport {MDCFormField} from '@material/form-field';\nimport {MDCRadio} from '@material/radio';\n\nimport \"@material/form-field/dist/mdc.form-field.css\";\nimport \"@material/radio/dist/mdc.radio.css\";\n\nimport uuid from 'uuid'\n\nclass RadioButtons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n\n\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"mdc-form-field\">\n          <div className=\"mdc-radio primary\">\n            <input className=\"mdc-radio__native-control\" type=\"radio\" id=\"primaryRadio\" name=\"radios\" defaultChecked/>\n            <div className=\"mdc-radio__background\">\n              <div className=\"mdc-radio__outer-circle\" />\n              <div className=\"mdc-radio__inner-circle\" />\n            </div>\n          </div>\n          <label htmlFor=\"primaryRadio\">Background Color</label>\n        </div>\n\n        <div className=\"mdc-form-field\">\n          <div className=\"mdc-radio secondary\">\n            <input className=\"mdc-radio__native-control\" type=\"radio\" id=\"secondaryRadio\" name=\"radios\"/>\n            <div className=\"mdc-radio__background\">\n              <div className=\"mdc-radio__outer-circle\" />\n              <div className=\"mdc-radio__inner-circle\" />\n            </div>\n          </div>\n          <label htmlFor=\"secondaryRadio\">Font Color</label>\n        </div>\n      </Fragment>\n\n    )\n  }\n}\n\nexport default RadioButtons\n","/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Data from './icons'\n\nexport default function ComboBox(props) {\n  return (\n    <Autocomplete\n      onChange={(event, value)=> {\n        props.setMenuIcon(value)\n      }}\n\n      autoComplete={true}\n      id=\"combo-box-demo\"\n      options={Data.icons}\n      getOptionLabel={option => option.label}\n      renderOption={(option, { selected }) => (\n        <React.Fragment>\n          <i className=\"material-icons\">\n            {option.label}\n          </i>\n          <span style={{display: 'inline-block', marginLeft: \"8px\"}}>{option.label}</span>\n        </React.Fragment>\n      )}\n      style={{ width: 300 }}\n      renderInput={params => (\n        <TextField {...params}  label=\"Select menu icon\" variant=\"outlined\" fullWidth ></TextField>\n      )}\n    />\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport {MDCSwitch} from '@material/switch';\nimport \"@material/switch/dist/mdc.switch.css\";\nclass Toggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n  componentDidMount () {\n    this.switchControl = new MDCSwitch(document.querySelector('.mdc-switch'));\n  }\n  render () {\n    return (\n      <div>\n        <div className=\"mdc-switch\">\n          <div className=\"mdc-switch__track\" />\n          <div className=\"mdc-switch__thumb-underlay\">\n            <div className=\"mdc-switch__thumb\">\n              <input type=\"checkbox\" id=\"menuToggle\" className=\"mdc-switch__native-control\" role=\"switch\" defaultChecked={true} />\n            </div>\n          </div>\n        </div>\n        <label htmlFor=\"basic-switch\" style={{marginLeft:'24px'}}>\n          {\n            this.props.showMenuIcon === true ?\n              'Menu icon on' :\n              'Menu icon off'\n          }\n        </label>\n      </div>\n    )\n  }\n}\n\nexport default Toggle;\n","import React, {Fragment} from \"react\";\nimport \"@material/chips/dist/mdc.chips.css\"\nimport {MDCChipSet} from '@material/chips';\n\nconst Chip = (props) => {\n  return (\n    <div onClick={props.remove} data-index={props.index} className=\"mdc-chip\" role=\"row\">\n      <div className=\"mdc-chip__ripple\"></div>\n      <span role=\"gridcell\">\n      <span role=\"button\" tabIndex=\"0\" className=\"mdc-chip__text\">{props.title}</span>\n    </span>\n        <span role=\"gridcell\">\n      <i className=\"material-icons mdc-chip__icon mdc-chip__icon--trailing\" tabIndex=\"-1\" role=\"button\">cancel</i>\n    </span>\n    </div>\n  );\n};\nexport default Chip\n\nif (document.querySelector('.mdc-chip-set')) {\n  const chipSetEl = document.querySelector('.mdc-chip-set');\n  const chipSet = new MDCChipSet(chipSetEl);\n}\n\n","import React, {Component, Fragment} from 'react';\nimport SelectBox from './SelectBox'\nimport YourComponent from './YourComponent'\nimport 'normalize.css'\nimport './App.css';\nimport \"@material/textfield/dist/mdc.textfield.css\";\n\nimport Code from \"./Code\";\nimport {MDCSelect} from \"@material/select\";\nimport {MDCTextField} from '@material/textfield';\nimport ColorPalette from \"./ColorPalatte\";\nimport RadioButtons from \"./ColorTypeRadios\";\nimport IconSelect from './IconsSelect'\nimport Toggle from \"./Toggle\";\nimport Chip from \"./Chip\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorType: \"primary\",\n      menuIcon: \"menu\",\n      primaryColorData: {},\n      secondaryColorData: {},\n      showMenuIcon: true,\n      input: '',\n      buttonsBuilt: []\n    };\n\n    this.themeChoices = [\n      'standard',\n      'dense',\n      'prominent',\n      'collapsed',\n      'short',\n      'fixed'\n    ]\n\n    this.setMenuIcon = this.setMenuIcon.bind(this);\n    this.setIconButtons = this.setIconButtons.bind(this);\n    this.buildIconButtons = this.buildIconButtons.bind(this);\n    this.removeButtonNodes = this.removeButtonNodes.bind(this);\n    this.remove = this.remove.bind(this)\n    this.buttonsBuilt = [];\n  }\n\n  componentWillMount () {\n    this.setState({primaryColorData: {\n        selectedHex: '#f44336',\n        selectedName: 'red',\n        selectedShade: '500'\n      }});\n\n    this.setState({secondaryColorData: {\n        selectedHex: '#ffffff',\n        selectedName: 'white',\n        selectedShade: '500'\n      }});\n\n  }\n  removeButtonNodes() {\n    const node = document.querySelector('flayvor-top-app-bar').shadowRoot.querySelectorAll('.mdc-top-app-bar__section--align-end button');\n    node.forEach(item => {\n      item.remove();\n    })\n    this.setState({update: !this.state.update})\n  }\n  remove (event) {\n    let arr = this.state.buttonsBuilt;\n    const selectedIndex = event.nativeEvent.target.getAttribute('data-index');\n    arr.splice(selectedIndex, 1);\n    this.setState({buttonsBuilt: arr});\n    this.removeButtonNodes();\n    this.setState({update: !this.state.update})\n  }\n  componentDidMount() {\n    this.setState({theme: 'dense'})\n    this.setState({input: \"Flayvor Top App Bar\"})\n    this.select = new MDCSelect(document.querySelector('.mdc-select'));\n    this.textfield = new MDCTextField(document.querySelector('.mdc-text-field'));\n\n    this.textFieldNode = document.querySelector('.mdc-text-field input');\n    this.select.listen('MDCSelect:change', () => {\n      this.setState({theme: this.select.value});\n      this.theme = this.select.value\n    });\n\n    this.textFieldNode.addEventListener('input', event => {\n      this.setState({input: event.target.value});\n    })\n\n    this.swatches = document.querySelector('.color-palette');\n    this.swatches.addEventListener('click', event => {\n      if (event.target.tagName !== \"DIV\") {\n        if (this.state.colorType === \"primary\") {\n          this.setState({primaryColorData: {\n              selectedHex: event.target.getAttribute('data-id'),\n              selectedName: event.target.getAttribute('data-hue'),\n              selectedShade: event.target.getAttribute('data-shade')\n            }});\n        } else {\n          this.setState({secondaryColorData: {\n              selectedHex: event.target.getAttribute('data-id'),\n              selectedName: event.target.getAttribute('data-hue'),\n              selectedShade: event.target.getAttribute('data-shade')\n            }});\n        }\n      }\n    })\n\n    this.radios = document.querySelectorAll('input[type=\"radio\"]');\n      this.radios.forEach(radio => {\n        radio.addEventListener('click', event => {\n          if (event.target.id === 'primaryRadio') {\n            this.setState({colorType: \"primary\"})\n          } else {\n            this.setState({colorType: \"secondary\"})\n          }\n        })\n      })\n    this.toggle = document.querySelector('#menuToggle');\n      this.toggle.addEventListener('change',event => {\n       this.setState({showMenuIcon: event.target.checked})\n      })\n  }\n\n  componentDidUpdate (prevProps, prevState){\n    if (this.state.colorType !== prevState.colorType) {\n      if (this.state.colorType === 'primary') {\n        this.setState({data: prevState.primaryColorData})\n      } else {\n        this.setState({data: prevState.secondaryColorData})\n      }\n    }\n  }\n\n  buildIconButtons (event) {\n    this.removeButtonNodes();\n    let arr = this.state.buttonsBuilt;\n    arr.push(this.state.buttonIcon)\n    this.setState({'update': !this.state.update, 'buttonsBuilt': arr})\n  }\n\n  setIconButtons (value) {\n    if (value === null) {\n      this.setState({buttonIcon: 'menu'})\n    } else {\n      this.setState({buttonIcon: value.label})\n    }\n  }\n\n  setMenuIcon (value) {\n    if (value === null) {\n      this.setState({menuIcon: 'menu'})\n    } else {\n      this.setState({menuIcon: value.label})\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <div className={\"demo-selector\"}>\n          <div className={\"col left\"}>\n            <div className={\"row\"}>\n            <SelectBox themeChoices={this.themeChoices}\n                       label={\"Select your theme\"}\n                       node={'flayvor-top-app-bar'}\n            />\n            </div>\n            <div className={\"row\"}>\n              <RadioButtons/>\n              <ColorPalette data={\n                this.state.colorType === \"primary\" ? this.state.primaryColorData : this.state.secondaryColorData\n              } colorType={this.state.colorType}/>\n            </div>\n            <div className={\"row menu-icon\"}>\n              <Toggle showMenuIcon={this.state.showMenuIcon}/>\n              {\n                this.state.showMenuIcon ? <IconSelect setMenuIcon={this.setMenuIcon} value={this.state.menuIcon}/>: <Fragment></Fragment>\n              }\n            </div>\n            <div className={\"row\"}>\n              <div className=\"mdc-text-field mdc-text-field--outlined\" style={{width: '100%'}}>\n                <input className=\"mdc-text-field__input\" id=\"text-field-hero-input\" />\n                <div className=\"mdc-notched-outline\">\n                  <div className=\"mdc-notched-outline__leading\" />\n                  <div className=\"mdc-notched-outline__notch\">\n                    <label htmlFor=\"text-field-hero-input\" className=\"mdc-floating-label\">Title</label>\n                  </div>\n                  <div className=\"mdc-notched-outline__trailing\" />\n                </div>\n              </div>\n            </div>\n            <div className={\"row\"} style={{display:\"flex\"}}>\n              <IconSelect setMenuIcon={this.setIconButtons} value={this.state.buttonIcon}/>\n              <button onClick={this.buildIconButtons} className=\"mdc-button mdc-button--dense mdc-button--unelevated demo-button-shaped mdc-ripple-upgraded\">\n                <span className=\"mdc-button__ripple\"></span>\n                <span className=\"mdc-button__label\">Add</span>\n              </button>\n            </div>\n            <div className={\"row\"}>\n              {\n                this.state.buttonsBuilt.length > 0 ?\n                  this.state.buttonsBuilt.map((button,index) => {\n                    return (\n                      <Chip key={index} title={button} index={index} remove={this.remove}></Chip>\n                      )\n                  }) : <Fragment></Fragment>\n              }\n            </div>\n          </div>\n          <div className={\"col right\"}>\n            <div className={\"row\"}>\n              <YourComponent buttonsBuilt={this.state.buttonsBuilt} title={this.state.input} showMenuIcon={this.state.showMenuIcon} bgColor={this.state.primaryColorData.selectedHex} fontColor={this.state.secondaryColorData.selectedHex} menuIcon={this.state.menuIcon}></YourComponent>\n            </div>\n            <div className={\"row\"}>\n              <Code type={\"html\"} update={this.state.update} theme={this.state.theme} menuIcon={this.state.menuIcon} showIcon={this.state.showMenuIcon} title={this.state.input}/>\n            </div>\n            <div className={\"row\"}>\n              <Code type={\"css\"} theme={this.state.theme} color={this.state.primaryColorData.selectedHex} fontColor={this.state.secondaryColorData.selectedHex} menuIcon={this.state.menuIcon}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}